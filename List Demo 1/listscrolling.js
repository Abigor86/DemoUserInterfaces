
CF.userMain = function() {
	// Our main script function that iViewer calls as soon as the GUI
	// is loaded, and iViewer is ready to run Javascript
	generateListData();
};

function generateListData() {
	// Generate list data for both the horizontal list (l1)
	// and the vertical list (l10). We use http://www.lorempixum.com
	// to obtain random images for each image in the list.
	//
	// We need to generate a unique URL for each image, otherwise we
	// will send out multiple requests to LoremPixum, but every time
	// we receive an image, all the image elements in our GUI will
	// update with this image since they would all be looking at the
	// same URL to gather their image.
	//
	// To perform this, we add a unique parameter to each request
	// that will be ignored by LoremPixum, but will ensure that each
	// image is request a unique URL
	var items = [];
	for (var i=0; i < 30; i++) {
		items.push({
			// add an unused parameter so that each request is unique
			s1:"http://www.lorempixum.com/120/120/?"+i,
			s2:i.toString()
		});
	}
	CF.listAdd("l1", items);
	
	items = [];
	for (var i=0; i < 30; i++) {
		items.push({
			// add an unused parameter so that each request is unique
			s1:"http://www.lorempixum.com/120/120/?100"+i,
			s2:i.toString()
		});
	}
	CF.listAdd("l10", items);
}

function onListDidScroll(info) {
	// A list has just scrolled. This function is called by the ListDidScroll macro
	//
	// We want to update the text joins that show information about the current scroll position,
	// number of items and number of visible items.
	//
	// Since we are handling both lists l1 and l10 in this code,
	// we want to route the text updates to s2/s3/s4 (for l1) or s12/s13/s14 (for l10)
	var join = (info.list=="l1") ? "s" : "s1";
	var updates = [
		{ "join": join+"2", value: info.count },
		{ "join": join+"3", value: info.top },
		{ "join": join+"4", value: info.visible }
	];
	CF.setJoins(updates);
}

function onDoScrollList(listJoin, position) {
	// Programmatically scroll the list to the given position
	//
	// We receive a scrollData object generated by the ScrollList command (from Loopback)
	// The object carries the list join, and the position we need to set. Since the position
	// is generated from the slider position, it's 0-100 so we need to convert it to an
	// actual item index.
	// To do this, we first obtain the list info which gives us the number of items in the
	// list, then compute the actual item index we want to scroll to.
	CF.listInfo(listJoin, function(j, count, first, numVisible) {
		var nonvisible = (count - numVisible);
		var index = Math.min(Math.max(0, Math.round((nonvisible / 100) * position)), count-1);
		CF.listScroll(listJoin, index, CF.TopPosition, true);
	});
}